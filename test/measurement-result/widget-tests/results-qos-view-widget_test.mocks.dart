// Mocks generated by Mockito 5.4.5 from annotations
// in nt_flutter_standalone/test/measurement-result/widget-tests/results-qos-view-widget_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:flutter_bloc/flutter_bloc.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:nt_flutter_standalone/core/wrappers/url-launcher-wrapper.dart'
    as _i3;
import 'package:nt_flutter_standalone/modules/measurement-result/models/measurement-history-results.dart'
    as _i6;
import 'package:nt_flutter_standalone/modules/measurement-result/store/measurement-result.cubit.dart'
    as _i5;
import 'package:nt_flutter_standalone/modules/measurement-result/store/measurement-result.state.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeMeasurementResultState_0 extends _i1.SmartFake
    implements _i2.MeasurementResultState {
  _FakeMeasurementResultState_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [UrlLauncherWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockUrlLauncherWrapper extends _i1.Mock
    implements _i3.UrlLauncherWrapper {
  MockUrlLauncherWrapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool> canLaunch(Uri? url) =>
      (super.noSuchMethod(
            Invocation.method(#canLaunch, [url]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<bool> launch(Uri? url) =>
      (super.noSuchMethod(
            Invocation.method(#launch, [url]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);
}

/// A class which mocks [MeasurementResultCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockMeasurementResultCubitCalls extends _i1.Mock
    implements _i5.MeasurementResultCubit {
  @override
  _i2.MeasurementResultState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeMeasurementResultState_0(
              this,
              Invocation.getter(#state),
            ),
            returnValueForMissingStub: _FakeMeasurementResultState_0(
              this,
              Invocation.getter(#state),
            ),
          )
          as _i2.MeasurementResultState);

  @override
  _i4.Stream<_i2.MeasurementResultState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i4.Stream<_i2.MeasurementResultState>.empty(),
            returnValueForMissingStub:
                _i4.Stream<_i2.MeasurementResultState>.empty(),
          )
          as _i4.Stream<_i2.MeasurementResultState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(
            Invocation.getter(#isClosed),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  _i4.Future<dynamic> init({
    required _i6.MeasurementHistoryResults? result,
    String? testUuid,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#init, [], {
              #result: result,
              #testUuid: testUuid,
            }),
            returnValue: _i4.Future<dynamic>.value(),
            returnValueForMissingStub: _i4.Future<dynamic>.value(),
          )
          as _i4.Future<dynamic>);

  @override
  dynamic getPage(String? route, {String? pageContent}) => super.noSuchMethod(
    Invocation.method(#getPage, [route], {#pageContent: pageContent}),
    returnValueForMissingStub: null,
  );

  @override
  void emit(_i2.MeasurementResultState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void onChange(_i7.Change<_i2.MeasurementResultState>? change) =>
      super.noSuchMethod(
        Invocation.method(#onChange, [change]),
        returnValueForMissingStub: null,
      );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  _i4.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}
