// Mocks generated by Mockito 5.3.2 from annotations
// in nt_flutter_standalone/test/measurements/unit-tests/location-service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:geocoding/geocoding.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:nt_flutter_standalone/modules/measurements/wrappers/geocoding-wrapper.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [GeocodingWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockGeocodingWrapper extends _i1.Mock implements _i2.GeocodingWrapper {
  MockGeocodingWrapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.Placemark>> getPlaceMarksFromCoordinates(
    double? lat,
    double? lng,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPlaceMarksFromCoordinates,
          [
            lat,
            lng,
          ],
        ),
        returnValue: _i3.Future<List<_i4.Placemark>>.value(<_i4.Placemark>[]),
      ) as _i3.Future<List<_i4.Placemark>>);
  @override
  _i3.Future<List<_i4.Location>> getLocationFromAddress(String? address) =>
      (super.noSuchMethod(
        Invocation.method(
          #getLocationFromAddress,
          [address],
        ),
        returnValue: _i3.Future<List<_i4.Location>>.value(<_i4.Location>[]),
      ) as _i3.Future<List<_i4.Location>>);
}
