// Mocks generated by Mockito 5.4.4 from annotations
// in nt_flutter_standalone/test/measurements/unit-tests/signal-service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:connectivity_plus/connectivity_plus.dart' as _i15;
import 'package:dio/dio.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i12;
import 'package:nt_flutter_standalone/core/models/error-handler.dart' as _i6;
import 'package:nt_flutter_standalone/core/models/project.dart' as _i9;
import 'package:nt_flutter_standalone/core/wrappers/platform.wrapper.dart'
    as _i16;
import 'package:nt_flutter_standalone/modules/measurement-result/models/location-model.dart'
    as _i8;
import 'package:nt_flutter_standalone/modules/measurements/models/measurement-result.dart'
    as _i5;
import 'package:nt_flutter_standalone/modules/measurements/models/measurement-server.dart'
    as _i7;
import 'package:nt_flutter_standalone/modules/measurements/services/ip-info.service.dart'
    as _i14;
import 'package:nt_flutter_standalone/modules/measurements/services/measurements.api.service.dart'
    as _i3;
import 'package:nt_flutter_standalone/modules/measurements/wrappers/carrier-info.wrapper.dart'
    as _i11;
import 'package:nt_flutter_standalone/modules/measurements/wrappers/cell-info.wrapper.dart'
    as _i13;
import 'package:nt_flutter_standalone/modules/measurements/wrappers/wifi-for-iot-plugin.wrapper.dart'
    as _i10;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDio_0 extends _i1.SmartFake implements _i2.Dio {
  _FakeDio_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MeasurementsApiService].
///
/// See the documentation for Mockito's code generation for more information.
class MockMeasurementsApiService extends _i1.Mock
    implements _i3.MeasurementsApiService {
  MockMeasurementsApiService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Dio get dio => (super.noSuchMethod(
        Invocation.getter(#dio),
        returnValue: _FakeDio_0(
          this,
          Invocation.getter(#dio),
        ),
      ) as _i2.Dio);

  @override
  bool get testing => (super.noSuchMethod(
        Invocation.getter(#testing),
        returnValue: false,
      ) as bool);

  @override
  set testing(bool? _testing) => super.noSuchMethod(
        Invocation.setter(
          #testing,
          _testing,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<dynamic> sendMeasurementResults(
    _i5.MeasurementResult? result, {
    _i6.ErrorHandler? errorHandler,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendMeasurementResults,
          [result],
          {#errorHandler: errorHandler},
        ),
        returnValue: _i4.Future<dynamic>.value(),
      ) as _i4.Future<dynamic>);

  @override
  _i4.Future<List<_i7.MeasurementServer>>
      getMeasurementServersForCurrentFlavor({
    _i8.LocationModel? location,
    _i6.ErrorHandler? errorHandler,
    _i9.NTProject? project,
  }) =>
          (super.noSuchMethod(
            Invocation.method(
              #getMeasurementServersForCurrentFlavor,
              [],
              {
                #location: location,
                #errorHandler: errorHandler,
                #project: project,
              },
            ),
            returnValue: _i4.Future<List<_i7.MeasurementServer>>.value(
                <_i7.MeasurementServer>[]),
          ) as _i4.Future<List<_i7.MeasurementServer>>);

  @override
  _i2.Dio dioInstanceForUrl(String? url) => (super.noSuchMethod(
        Invocation.method(
          #dioInstanceForUrl,
          [url],
        ),
        returnValue: _FakeDio_0(
          this,
          Invocation.method(
            #dioInstanceForUrl,
            [url],
          ),
        ),
      ) as _i2.Dio);
}

/// A class which mocks [WifiForIoTPluginWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockWifiForIoTPluginWrapper extends _i1.Mock
    implements _i10.WifiForIoTPluginWrapper {
  MockWifiForIoTPluginWrapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<int?> getFrequency() => (super.noSuchMethod(
        Invocation.method(
          #getFrequency,
          [],
        ),
        returnValue: _i4.Future<int?>.value(),
      ) as _i4.Future<int?>);

  @override
  _i4.Future<int?> getCurrentSignalStrength() => (super.noSuchMethod(
        Invocation.method(
          #getCurrentSignalStrength,
          [],
        ),
        returnValue: _i4.Future<int?>.value(),
      ) as _i4.Future<int?>);

  @override
  _i4.Future<String?> getSSID() => (super.noSuchMethod(
        Invocation.method(
          #getSSID,
          [],
        ),
        returnValue: _i4.Future<String?>.value(),
      ) as _i4.Future<String?>);
}

/// A class which mocks [CarrierInfoWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockCarrierInfoWrapper extends _i1.Mock
    implements _i11.CarrierInfoWrapper {
  MockCarrierInfoWrapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<String> getNetworkGeneration() => (super.noSuchMethod(
        Invocation.method(
          #getNetworkGeneration,
          [],
        ),
        returnValue: _i4.Future<String>.value(_i12.dummyValue<String>(
          this,
          Invocation.method(
            #getNetworkGeneration,
            [],
          ),
        )),
      ) as _i4.Future<String>);

  @override
  _i4.Future<String> getRadioType() => (super.noSuchMethod(
        Invocation.method(
          #getRadioType,
          [],
        ),
        returnValue: _i4.Future<String>.value(_i12.dummyValue<String>(
          this,
          Invocation.method(
            #getRadioType,
            [],
          ),
        )),
      ) as _i4.Future<String>);

  @override
  _i4.Future<String> getNativeCarrierName() => (super.noSuchMethod(
        Invocation.method(
          #getNativeCarrierName,
          [],
        ),
        returnValue: _i4.Future<String>.value(_i12.dummyValue<String>(
          this,
          Invocation.method(
            #getNativeCarrierName,
            [],
          ),
        )),
      ) as _i4.Future<String>);

  @override
  _i4.Future<String> getCarrierName() => (super.noSuchMethod(
        Invocation.method(
          #getCarrierName,
          [],
        ),
        returnValue: _i4.Future<String>.value(_i12.dummyValue<String>(
          this,
          Invocation.method(
            #getCarrierName,
            [],
          ),
        )),
      ) as _i4.Future<String>);

  @override
  _i4.Future<bool> getIsDualSim() => (super.noSuchMethod(
        Invocation.method(
          #getIsDualSim,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
}

/// A class which mocks [CellInfoWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockCellInfoWrapper extends _i1.Mock implements _i13.CellInfoWrapper {
  MockCellInfoWrapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<String?> getCellInfo() => (super.noSuchMethod(
        Invocation.method(
          #getCellInfo,
          [],
        ),
        returnValue: _i4.Future<String?>.value(),
      ) as _i4.Future<String?>);

  @override
  _i4.Future<String?> getSimInfo() => (super.noSuchMethod(
        Invocation.method(
          #getSimInfo,
          [],
        ),
        returnValue: _i4.Future<String?>.value(),
      ) as _i4.Future<String?>);
}

/// A class which mocks [IPInfoService].
///
/// See the documentation for Mockito's code generation for more information.
class MockIPInfoService extends _i1.Mock implements _i14.IPInfoService {
  MockIPInfoService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Dio get dio => (super.noSuchMethod(
        Invocation.getter(#dio),
        returnValue: _FakeDio_0(
          this,
          Invocation.getter(#dio),
        ),
      ) as _i2.Dio);

  @override
  bool get testing => (super.noSuchMethod(
        Invocation.getter(#testing),
        returnValue: false,
      ) as bool);

  @override
  set testing(bool? _testing) => super.noSuchMethod(
        Invocation.setter(
          #testing,
          _testing,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<String> getPublicAddress(_i14.IPVersion? version) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPublicAddress,
          [version],
        ),
        returnValue: _i4.Future<String>.value(_i12.dummyValue<String>(
          this,
          Invocation.method(
            #getPublicAddress,
            [version],
          ),
        )),
      ) as _i4.Future<String>);

  @override
  _i4.Future<String> getPrivateAddress(_i14.IPVersion? version) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPrivateAddress,
          [version],
        ),
        returnValue: _i4.Future<String>.value(_i12.dummyValue<String>(
          this,
          Invocation.method(
            #getPrivateAddress,
            [version],
          ),
        )),
      ) as _i4.Future<String>);

  @override
  _i2.Dio dioInstanceForUrl(String? url) => (super.noSuchMethod(
        Invocation.method(
          #dioInstanceForUrl,
          [url],
        ),
        returnValue: _FakeDio_0(
          this,
          Invocation.method(
            #dioInstanceForUrl,
            [url],
          ),
        ),
      ) as _i2.Dio);
}

/// A class which mocks [Connectivity].
///
/// See the documentation for Mockito's code generation for more information.
class MockConnectivity extends _i1.Mock implements _i15.Connectivity {
  MockConnectivity() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Stream<_i15.ConnectivityResult> get onConnectivityChanged =>
      (super.noSuchMethod(
        Invocation.getter(#onConnectivityChanged),
        returnValue: _i4.Stream<_i15.ConnectivityResult>.empty(),
      ) as _i4.Stream<_i15.ConnectivityResult>);

  @override
  _i4.Future<_i15.ConnectivityResult> checkConnectivity() =>
      (super.noSuchMethod(
        Invocation.method(
          #checkConnectivity,
          [],
        ),
        returnValue: _i4.Future<_i15.ConnectivityResult>.value(
            _i15.ConnectivityResult.bluetooth),
      ) as _i4.Future<_i15.ConnectivityResult>);
}

/// A class which mocks [PlatformWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockPlatformWrapper extends _i1.Mock implements _i16.PlatformWrapper {
  MockPlatformWrapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isAndroid => (super.noSuchMethod(
        Invocation.getter(#isAndroid),
        returnValue: false,
      ) as bool);

  @override
  bool get isIOS => (super.noSuchMethod(
        Invocation.getter(#isIOS),
        returnValue: false,
      ) as bool);

  @override
  String get localeName => (super.noSuchMethod(
        Invocation.getter(#localeName),
        returnValue: _i12.dummyValue<String>(
          this,
          Invocation.getter(#localeName),
        ),
      ) as String);
}
