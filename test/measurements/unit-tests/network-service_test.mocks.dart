// Mocks generated by Mockito 5.3.2 from annotations
// in nt_flutter_standalone/test/measurements/unit-tests/network-service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i11;

import 'package:connectivity_plus/connectivity_plus.dart' as _i7;
import 'package:dio/dio.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:nt_flutter_standalone/core/models/error-handler.dart' as _i13;
import 'package:nt_flutter_standalone/core/wrappers/platform.wrapper.dart'
    as _i4;
import 'package:nt_flutter_standalone/modules/measurement-result/models/location-model.dart'
    as _i15;
import 'package:nt_flutter_standalone/modules/measurements/models/cell-info.dart'
    as _i19;
import 'package:nt_flutter_standalone/modules/measurements/models/measurement-result.dart'
    as _i12;
import 'package:nt_flutter_standalone/modules/measurements/models/measurement-server.dart'
    as _i14;
import 'package:nt_flutter_standalone/modules/measurements/models/network-info-details.dart'
    as _i9;
import 'package:nt_flutter_standalone/modules/measurements/models/signal-info.dart'
    as _i18;
import 'package:nt_flutter_standalone/modules/measurements/services/ip-info.service.dart'
    as _i16;
import 'package:nt_flutter_standalone/modules/measurements/services/measurements.api.service.dart'
    as _i10;
import 'package:nt_flutter_standalone/modules/measurements/services/permissions.service.dart'
    as _i5;
import 'package:nt_flutter_standalone/modules/measurements/services/signal.service.dart'
    as _i17;
import 'package:nt_flutter_standalone/modules/measurements/wrappers/carrier-info.wrapper.dart'
    as _i6;
import 'package:nt_flutter_standalone/modules/measurements/wrappers/cell-info.wrapper.dart'
    as _i3;
import 'package:nt_flutter_standalone/modules/measurements/wrappers/wifi-for-iot-plugin.wrapper.dart'
    as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDio_0 extends _i1.SmartFake implements _i2.Dio {
  _FakeDio_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCellInfoWrapper_1 extends _i1.SmartFake
    implements _i3.CellInfoWrapper {
  _FakeCellInfoWrapper_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePlatformWrapper_2 extends _i1.SmartFake
    implements _i4.PlatformWrapper {
  _FakePlatformWrapper_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePermissionsService_3 extends _i1.SmartFake
    implements _i5.PermissionsService {
  _FakePermissionsService_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCarrierInfoWrapper_4 extends _i1.SmartFake
    implements _i6.CarrierInfoWrapper {
  _FakeCarrierInfoWrapper_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeConnectivity_5 extends _i1.SmartFake implements _i7.Connectivity {
  _FakeConnectivity_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWifiForIoTPluginWrapper_6 extends _i1.SmartFake
    implements _i8.WifiForIoTPluginWrapper {
  _FakeWifiForIoTPluginWrapper_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNetworkInfoDetails_7 extends _i1.SmartFake
    implements _i9.NetworkInfoDetails {
  _FakeNetworkInfoDetails_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MeasurementsApiService].
///
/// See the documentation for Mockito's code generation for more information.
class MockMeasurementsApiService extends _i1.Mock
    implements _i10.MeasurementsApiService {
  MockMeasurementsApiService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Dio get dio => (super.noSuchMethod(
        Invocation.getter(#dio),
        returnValue: _FakeDio_0(
          this,
          Invocation.getter(#dio),
        ),
      ) as _i2.Dio);
  @override
  bool get testing => (super.noSuchMethod(
        Invocation.getter(#testing),
        returnValue: false,
      ) as bool);
  @override
  set testing(bool? _testing) => super.noSuchMethod(
        Invocation.setter(
          #testing,
          _testing,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i11.Future<dynamic> sendMeasurementResults(
    _i12.MeasurementResult? result, {
    _i13.ErrorHandler? errorHandler,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendMeasurementResults,
          [result],
          {#errorHandler: errorHandler},
        ),
        returnValue: _i11.Future<dynamic>.value(),
      ) as _i11.Future<dynamic>);
  @override
  _i11.Future<List<_i14.MeasurementServer>>
      getMeasurementServersForCurrentFlavor({
    _i15.LocationModel? location,
    _i13.ErrorHandler? errorHandler,
  }) =>
          (super.noSuchMethod(
            Invocation.method(
              #getMeasurementServersForCurrentFlavor,
              [],
              {
                #location: location,
                #errorHandler: errorHandler,
              },
            ),
            returnValue: _i11.Future<List<_i14.MeasurementServer>>.value(
                <_i14.MeasurementServer>[]),
          ) as _i11.Future<List<_i14.MeasurementServer>>);
  @override
  _i2.Dio dioInstanceForUrl(String? url) => (super.noSuchMethod(
        Invocation.method(
          #dioInstanceForUrl,
          [url],
        ),
        returnValue: _FakeDio_0(
          this,
          Invocation.method(
            #dioInstanceForUrl,
            [url],
          ),
        ),
      ) as _i2.Dio);
}

/// A class which mocks [WifiForIoTPluginWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockWifiForIoTPluginWrapper extends _i1.Mock
    implements _i8.WifiForIoTPluginWrapper {
  MockWifiForIoTPluginWrapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.Future<int?> getFrequency() => (super.noSuchMethod(
        Invocation.method(
          #getFrequency,
          [],
        ),
        returnValue: _i11.Future<int?>.value(),
      ) as _i11.Future<int?>);
  @override
  _i11.Future<int?> getCurrentSignalStrength() => (super.noSuchMethod(
        Invocation.method(
          #getCurrentSignalStrength,
          [],
        ),
        returnValue: _i11.Future<int?>.value(),
      ) as _i11.Future<int?>);
  @override
  _i11.Future<String?> getSSID() => (super.noSuchMethod(
        Invocation.method(
          #getSSID,
          [],
        ),
        returnValue: _i11.Future<String?>.value(),
      ) as _i11.Future<String?>);
}

/// A class which mocks [CarrierInfoWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockCarrierInfoWrapper extends _i1.Mock
    implements _i6.CarrierInfoWrapper {
  MockCarrierInfoWrapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.Future<String> getNetworkGeneration() => (super.noSuchMethod(
        Invocation.method(
          #getNetworkGeneration,
          [],
        ),
        returnValue: _i11.Future<String>.value(''),
      ) as _i11.Future<String>);
  @override
  _i11.Future<String> getRadioType() => (super.noSuchMethod(
        Invocation.method(
          #getRadioType,
          [],
        ),
        returnValue: _i11.Future<String>.value(''),
      ) as _i11.Future<String>);
  @override
  _i11.Future<String> getNativeCarrierName() => (super.noSuchMethod(
        Invocation.method(
          #getNativeCarrierName,
          [],
        ),
        returnValue: _i11.Future<String>.value(''),
      ) as _i11.Future<String>);
  @override
  _i11.Future<String> getCarrierName() => (super.noSuchMethod(
        Invocation.method(
          #getCarrierName,
          [],
        ),
        returnValue: _i11.Future<String>.value(''),
      ) as _i11.Future<String>);
  @override
  _i11.Future<bool> getIsDualSim() => (super.noSuchMethod(
        Invocation.method(
          #getIsDualSim,
          [],
        ),
        returnValue: _i11.Future<bool>.value(false),
      ) as _i11.Future<bool>);
}

/// A class which mocks [CellInfoWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockCellInfoWrapper extends _i1.Mock implements _i3.CellInfoWrapper {
  MockCellInfoWrapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.Future<String?> getCellInfo() => (super.noSuchMethod(
        Invocation.method(
          #getCellInfo,
          [],
        ),
        returnValue: _i11.Future<String?>.value(),
      ) as _i11.Future<String?>);
  @override
  _i11.Future<String?> getSimInfo() => (super.noSuchMethod(
        Invocation.method(
          #getSimInfo,
          [],
        ),
        returnValue: _i11.Future<String?>.value(),
      ) as _i11.Future<String?>);
}

/// A class which mocks [IPInfoService].
///
/// See the documentation for Mockito's code generation for more information.
class MockIPInfoService extends _i1.Mock implements _i16.IPInfoService {
  MockIPInfoService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Dio get dio => (super.noSuchMethod(
        Invocation.getter(#dio),
        returnValue: _FakeDio_0(
          this,
          Invocation.getter(#dio),
        ),
      ) as _i2.Dio);
  @override
  bool get testing => (super.noSuchMethod(
        Invocation.getter(#testing),
        returnValue: false,
      ) as bool);
  @override
  set testing(bool? _testing) => super.noSuchMethod(
        Invocation.setter(
          #testing,
          _testing,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i11.Future<String> getPublicAddress(_i16.IPVersion? version) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPublicAddress,
          [version],
        ),
        returnValue: _i11.Future<String>.value(''),
      ) as _i11.Future<String>);
  @override
  _i11.Future<String> getPrivateAddress(_i16.IPVersion? version) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPrivateAddress,
          [version],
        ),
        returnValue: _i11.Future<String>.value(''),
      ) as _i11.Future<String>);
  @override
  _i2.Dio dioInstanceForUrl(String? url) => (super.noSuchMethod(
        Invocation.method(
          #dioInstanceForUrl,
          [url],
        ),
        returnValue: _FakeDio_0(
          this,
          Invocation.method(
            #dioInstanceForUrl,
            [url],
          ),
        ),
      ) as _i2.Dio);
}

/// A class which mocks [Connectivity].
///
/// See the documentation for Mockito's code generation for more information.
class MockConnectivity extends _i1.Mock implements _i7.Connectivity {
  MockConnectivity() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.Stream<_i7.ConnectivityResult> get onConnectivityChanged =>
      (super.noSuchMethod(
        Invocation.getter(#onConnectivityChanged),
        returnValue: _i11.Stream<_i7.ConnectivityResult>.empty(),
      ) as _i11.Stream<_i7.ConnectivityResult>);
  @override
  _i11.Future<_i7.ConnectivityResult> checkConnectivity() =>
      (super.noSuchMethod(
        Invocation.method(
          #checkConnectivity,
          [],
        ),
        returnValue: _i11.Future<_i7.ConnectivityResult>.value(
            _i7.ConnectivityResult.bluetooth),
      ) as _i11.Future<_i7.ConnectivityResult>);
}

/// A class which mocks [SignalService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSignalService extends _i1.Mock implements _i17.SignalService {
  MockSignalService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.CellInfoWrapper get cellPlugin => (super.noSuchMethod(
        Invocation.getter(#cellPlugin),
        returnValue: _FakeCellInfoWrapper_1(
          this,
          Invocation.getter(#cellPlugin),
        ),
      ) as _i3.CellInfoWrapper);
  @override
  _i4.PlatformWrapper get platform => (super.noSuchMethod(
        Invocation.getter(#platform),
        returnValue: _FakePlatformWrapper_2(
          this,
          Invocation.getter(#platform),
        ),
      ) as _i4.PlatformWrapper);
  @override
  _i5.PermissionsService get permission => (super.noSuchMethod(
        Invocation.getter(#permission),
        returnValue: _FakePermissionsService_3(
          this,
          Invocation.getter(#permission),
        ),
      ) as _i5.PermissionsService);
  @override
  _i6.CarrierInfoWrapper get carrierPlugin => (super.noSuchMethod(
        Invocation.getter(#carrierPlugin),
        returnValue: _FakeCarrierInfoWrapper_4(
          this,
          Invocation.getter(#carrierPlugin),
        ),
      ) as _i6.CarrierInfoWrapper);
  @override
  _i7.Connectivity get connectivity => (super.noSuchMethod(
        Invocation.getter(#connectivity),
        returnValue: _FakeConnectivity_5(
          this,
          Invocation.getter(#connectivity),
        ),
      ) as _i7.Connectivity);
  @override
  _i8.WifiForIoTPluginWrapper get wifiPlugin => (super.noSuchMethod(
        Invocation.getter(#wifiPlugin),
        returnValue: _FakeWifiForIoTPluginWrapper_6(
          this,
          Invocation.getter(#wifiPlugin),
        ),
      ) as _i8.WifiForIoTPluginWrapper);
  @override
  _i11.Future<_i9.NetworkInfoDetails> getCurrentMobileNetworkDetails() =>
      (super.noSuchMethod(
        Invocation.method(
          #getCurrentMobileNetworkDetails,
          [],
        ),
        returnValue:
            _i11.Future<_i9.NetworkInfoDetails>.value(_FakeNetworkInfoDetails_7(
          this,
          Invocation.method(
            #getCurrentMobileNetworkDetails,
            [],
          ),
        )),
      ) as _i11.Future<_i9.NetworkInfoDetails>);
  @override
  _i11.Future<List<_i18.SignalInfo>?>? getCurrentSignalInfo(int? startTime) =>
      (super.noSuchMethod(Invocation.method(
        #getCurrentSignalInfo,
        [startTime],
      )) as _i11.Future<List<_i18.SignalInfo>?>?);
  @override
  _i11.Future<_i19.CellInfoModel?> getPrimaryCellInfo() => (super.noSuchMethod(
        Invocation.method(
          #getPrimaryCellInfo,
          [],
        ),
        returnValue: _i11.Future<_i19.CellInfoModel?>.value(),
      ) as _i11.Future<_i19.CellInfoModel?>);
  @override
  _i11.Future<List<_i18.SignalInfo>> getPrimaryDataSignalInfo(
          _i17.CellType? cellType) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPrimaryDataSignalInfo,
          [cellType],
        ),
        returnValue:
            _i11.Future<List<_i18.SignalInfo>>.value(<_i18.SignalInfo>[]),
      ) as _i11.Future<List<_i18.SignalInfo>>);
}

/// A class which mocks [PlatformWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockPlatformWrapper extends _i1.Mock implements _i4.PlatformWrapper {
  MockPlatformWrapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isAndroid => (super.noSuchMethod(
        Invocation.getter(#isAndroid),
        returnValue: false,
      ) as bool);
  @override
  bool get isIOS => (super.noSuchMethod(
        Invocation.getter(#isIOS),
        returnValue: false,
      ) as bool);
  @override
  String get localeName => (super.noSuchMethod(
        Invocation.getter(#localeName),
        returnValue: '',
      ) as String);
}
