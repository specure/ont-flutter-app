// Mocks generated by Mockito 5.3.2 from annotations
// in nt_flutter_standalone/test/net-neutrality/unit-tests/net-neutrality-cubit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dio/dio.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:nt_flutter_standalone/core/models/error-handler.dart' as _i9;
import 'package:nt_flutter_standalone/modules/history/models/net-neutrality-history.dart'
    as _i12;
import 'package:nt_flutter_standalone/modules/net-neutrality/models/dns-net-neutrality-settings-item.dart'
    as _i7;
import 'package:nt_flutter_standalone/modules/net-neutrality/models/net-neutrality-history-item.dart'
    as _i11;
import 'package:nt_flutter_standalone/modules/net-neutrality/models/net-neutrality-result.dart'
    as _i10;
import 'package:nt_flutter_standalone/modules/net-neutrality/models/net-neutrality-settings-response.dart'
    as _i4;
import 'package:nt_flutter_standalone/modules/net-neutrality/models/web-net-neutrality-settings-item.dart'
    as _i6;
import 'package:nt_flutter_standalone/modules/net-neutrality/services/net-neutrality-api.service.dart'
    as _i8;
import 'package:nt_flutter_standalone/modules/net-neutrality/services/net-neutrality-measurement.service.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDio_0 extends _i1.SmartFake implements _i2.Dio {
  _FakeDio_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [NetNeutralityMeasurementService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetNeutralityMeasurementService extends _i1.Mock
    implements _i3.NetNeutralityMeasurementService {
  @override
  set settings(_i4.NetNeutralitySettingsResponse? _settings) =>
      super.noSuchMethod(
        Invocation.setter(
          #settings,
          _settings,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set progressHandler(_i3.NetNeutralityProgressHandler? _progressHandler) =>
      super.noSuchMethod(
        Invocation.setter(
          #progressHandler,
          _progressHandler,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i2.Dio get dio => (super.noSuchMethod(
        Invocation.getter(#dio),
        returnValue: _FakeDio_0(
          this,
          Invocation.getter(#dio),
        ),
        returnValueForMissingStub: _FakeDio_0(
          this,
          Invocation.getter(#dio),
        ),
      ) as _i2.Dio);
  @override
  bool get testing => (super.noSuchMethod(
        Invocation.getter(#testing),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  set testing(bool? _testing) => super.noSuchMethod(
        Invocation.setter(
          #testing,
          _testing,
        ),
        returnValueForMissingStub: null,
      );
  @override
  dynamic initWithSettings(
    _i4.NetNeutralitySettingsResponse? settings, {
    _i3.NetNeutralityProgressHandler? progressHandler,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #initWithSettings,
          [settings],
          {#progressHandler: progressHandler},
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i5.Future<dynamic> runAllWebPageTests() => (super.noSuchMethod(
        Invocation.method(
          #runAllWebPageTests,
          [],
        ),
        returnValue: _i5.Future<dynamic>.value(),
        returnValueForMissingStub: _i5.Future<dynamic>.value(),
      ) as _i5.Future<dynamic>);
  @override
  _i5.Future<dynamic> runOneWebPageTest(
          _i6.WebNetNeutralitySettingsItem? test) =>
      (super.noSuchMethod(
        Invocation.method(
          #runOneWebPageTest,
          [test],
        ),
        returnValue: _i5.Future<dynamic>.value(),
        returnValueForMissingStub: _i5.Future<dynamic>.value(),
      ) as _i5.Future<dynamic>);
  @override
  _i5.Future<dynamic> runAllDnsTests() => (super.noSuchMethod(
        Invocation.method(
          #runAllDnsTests,
          [],
        ),
        returnValue: _i5.Future<dynamic>.value(),
        returnValueForMissingStub: _i5.Future<dynamic>.value(),
      ) as _i5.Future<dynamic>);
  @override
  _i5.Future<dynamic> runOneDnsTest(_i7.DnsNetNeutralitySettingsItem? test) =>
      (super.noSuchMethod(
        Invocation.method(
          #runOneDnsTest,
          [test],
        ),
        returnValue: _i5.Future<dynamic>.value(),
        returnValueForMissingStub: _i5.Future<dynamic>.value(),
      ) as _i5.Future<dynamic>);
  @override
  _i2.Dio dioInstanceForUrl(String? url) => (super.noSuchMethod(
        Invocation.method(
          #dioInstanceForUrl,
          [url],
        ),
        returnValue: _FakeDio_0(
          this,
          Invocation.method(
            #dioInstanceForUrl,
            [url],
          ),
        ),
        returnValueForMissingStub: _FakeDio_0(
          this,
          Invocation.method(
            #dioInstanceForUrl,
            [url],
          ),
        ),
      ) as _i2.Dio);
}

/// A class which mocks [NetNeutralityApiService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetNeutralityApiService extends _i1.Mock
    implements _i8.NetNeutralityApiService {
  @override
  _i2.Dio get dio => (super.noSuchMethod(
        Invocation.getter(#dio),
        returnValue: _FakeDio_0(
          this,
          Invocation.getter(#dio),
        ),
        returnValueForMissingStub: _FakeDio_0(
          this,
          Invocation.getter(#dio),
        ),
      ) as _i2.Dio);
  @override
  bool get testing => (super.noSuchMethod(
        Invocation.getter(#testing),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  set testing(bool? _testing) => super.noSuchMethod(
        Invocation.setter(
          #testing,
          _testing,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i5.Future<_i4.NetNeutralitySettingsResponse?> getSettings(
          {_i9.ErrorHandler? errorHandler}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSettings,
          [],
          {#errorHandler: errorHandler},
        ),
        returnValue: _i5.Future<_i4.NetNeutralitySettingsResponse?>.value(),
        returnValueForMissingStub:
            _i5.Future<_i4.NetNeutralitySettingsResponse?>.value(),
      ) as _i5.Future<_i4.NetNeutralitySettingsResponse?>);
  @override
  _i5.Future<void> postResults({
    _i10.NetNeutralityResult? results,
    _i9.ErrorHandler? errorHandler,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #postResults,
          [],
          {
            #results: results,
            #errorHandler: errorHandler,
          },
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<List<_i11.NetNeutralityHistoryItem>?> getHistory(
    String? openTestUuid, {
    _i9.ErrorHandler? errorHandler,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getHistory,
          [openTestUuid],
          {#errorHandler: errorHandler},
        ),
        returnValue: _i5.Future<List<_i11.NetNeutralityHistoryItem>?>.value(),
        returnValueForMissingStub:
            _i5.Future<List<_i11.NetNeutralityHistoryItem>?>.value(),
      ) as _i5.Future<List<_i11.NetNeutralityHistoryItem>?>);
  @override
  _i5.Future<_i12.NetNeutralityHistory?> getWholeHistory(
    int? page, {
    _i9.ErrorHandler? errorHandler,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getWholeHistory,
          [page],
          {#errorHandler: errorHandler},
        ),
        returnValue: _i5.Future<_i12.NetNeutralityHistory?>.value(),
        returnValueForMissingStub:
            _i5.Future<_i12.NetNeutralityHistory?>.value(),
      ) as _i5.Future<_i12.NetNeutralityHistory?>);
  @override
  _i2.Dio dioInstanceForUrl(String? url) => (super.noSuchMethod(
        Invocation.method(
          #dioInstanceForUrl,
          [url],
        ),
        returnValue: _FakeDio_0(
          this,
          Invocation.method(
            #dioInstanceForUrl,
            [url],
          ),
        ),
        returnValueForMissingStub: _FakeDio_0(
          this,
          Invocation.method(
            #dioInstanceForUrl,
            [url],
          ),
        ),
      ) as _i2.Dio);
}
