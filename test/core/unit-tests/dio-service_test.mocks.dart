// Mocks generated by Mockito 5.4.5 from annotations
// in nt_flutter_standalone/test/core/unit-tests/dio-service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i16;
import 'dart:io' as _i17;

import 'package:dio/dio.dart' as _i14;
import 'package:flutter_bloc/flutter_bloc.dart' as _i21;
import 'package:mockito/mockito.dart' as _i1;
import 'package:nt_flutter_standalone/core/models/bloc-event.dart' as _i22;
import 'package:nt_flutter_standalone/core/models/error-handler.dart' as _i19;
import 'package:nt_flutter_standalone/core/services/navigation.service.dart'
    as _i10;
import 'package:nt_flutter_standalone/core/wrappers/internet-address.wrapper.dart'
    as _i15;
import 'package:nt_flutter_standalone/core/wrappers/platform.wrapper.dart'
    as _i11;
import 'package:nt_flutter_standalone/core/wrappers/shared-preferences.wrapper.dart'
    as _i12;
import 'package:nt_flutter_standalone/modules/measurements/models/measurement-server.dart'
    as _i20;
import 'package:nt_flutter_standalone/modules/measurements/services/location.service.dart'
    as _i7;
import 'package:nt_flutter_standalone/modules/measurements/services/loop.mode.service.dart'
    as _i3;
import 'package:nt_flutter_standalone/modules/measurements/services/measurement.service.dart'
    as _i2;
import 'package:nt_flutter_standalone/modules/measurements/services/measurements.api.service.dart'
    as _i5;
import 'package:nt_flutter_standalone/modules/measurements/services/network.service.dart'
    as _i8;
import 'package:nt_flutter_standalone/modules/measurements/services/permissions.service.dart'
    as _i4;
import 'package:nt_flutter_standalone/modules/measurements/services/signal.service.dart'
    as _i9;
import 'package:nt_flutter_standalone/modules/measurements/store/measurements.bloc.dart'
    as _i18;
import 'package:nt_flutter_standalone/modules/measurements/store/measurements.state.dart'
    as _i13;
import 'package:nt_flutter_standalone/modules/settings/services/settings.service.dart'
    as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeMeasurementService_0 extends _i1.SmartFake
    implements _i2.MeasurementService {
  _FakeMeasurementService_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeLoopModeService_1 extends _i1.SmartFake
    implements _i3.LoopModeService {
  _FakeLoopModeService_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakePermissionsService_2 extends _i1.SmartFake
    implements _i4.PermissionsService {
  _FakePermissionsService_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeMeasurementsApiService_3 extends _i1.SmartFake
    implements _i5.MeasurementsApiService {
  _FakeMeasurementsApiService_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSettingsService_4 extends _i1.SmartFake
    implements _i6.SettingsService {
  _FakeSettingsService_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeLocationService_5 extends _i1.SmartFake
    implements _i7.LocationService {
  _FakeLocationService_5(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeNetworkService_6 extends _i1.SmartFake
    implements _i8.NetworkService {
  _FakeNetworkService_6(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSignalService_7 extends _i1.SmartFake implements _i9.SignalService {
  _FakeSignalService_7(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeNavigationService_8 extends _i1.SmartFake
    implements _i10.NavigationService {
  _FakeNavigationService_8(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakePlatformWrapper_9 extends _i1.SmartFake
    implements _i11.PlatformWrapper {
  _FakePlatformWrapper_9(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSharedPreferencesWrapper_10 extends _i1.SmartFake
    implements _i12.SharedPreferencesWrapper {
  _FakeSharedPreferencesWrapper_10(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeMeasurementsState_11 extends _i1.SmartFake
    implements _i13.MeasurementsState {
  _FakeMeasurementsState_11(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeRequestOptions_12 extends _i1.SmartFake
    implements _i14.RequestOptions {
  _FakeRequestOptions_12(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeStackTrace_13 extends _i1.SmartFake implements StackTrace {
  _FakeStackTrace_13(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDioException_14 extends _i1.SmartFake implements _i14.DioException {
  _FakeDioException_14(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [InternetAddressWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockInternetAddressWrapper extends _i1.Mock
    implements _i15.InternetAddressWrapper {
  MockInternetAddressWrapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i16.Future<List<_i17.InternetAddress>> lookup(
    String? host, {
    _i17.InternetAddressType? type = _i17.InternetAddressType.any,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#lookup, [host], {#type: type}),
            returnValue: _i16.Future<List<_i17.InternetAddress>>.value(
              <_i17.InternetAddress>[],
            ),
          )
          as _i16.Future<List<_i17.InternetAddress>>);
}

/// A class which mocks [MeasurementsBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockMeasurementsBlocCalls extends _i1.Mock
    implements _i18.MeasurementsBloc {
  @override
  _i2.MeasurementService get measurementService =>
      (super.noSuchMethod(
            Invocation.getter(#measurementService),
            returnValue: _FakeMeasurementService_0(
              this,
              Invocation.getter(#measurementService),
            ),
            returnValueForMissingStub: _FakeMeasurementService_0(
              this,
              Invocation.getter(#measurementService),
            ),
          )
          as _i2.MeasurementService);

  @override
  _i3.LoopModeService get loopModeService =>
      (super.noSuchMethod(
            Invocation.getter(#loopModeService),
            returnValue: _FakeLoopModeService_1(
              this,
              Invocation.getter(#loopModeService),
            ),
            returnValueForMissingStub: _FakeLoopModeService_1(
              this,
              Invocation.getter(#loopModeService),
            ),
          )
          as _i3.LoopModeService);

  @override
  _i4.PermissionsService get permissionsService =>
      (super.noSuchMethod(
            Invocation.getter(#permissionsService),
            returnValue: _FakePermissionsService_2(
              this,
              Invocation.getter(#permissionsService),
            ),
            returnValueForMissingStub: _FakePermissionsService_2(
              this,
              Invocation.getter(#permissionsService),
            ),
          )
          as _i4.PermissionsService);

  @override
  _i5.MeasurementsApiService get measurementsApiService =>
      (super.noSuchMethod(
            Invocation.getter(#measurementsApiService),
            returnValue: _FakeMeasurementsApiService_3(
              this,
              Invocation.getter(#measurementsApiService),
            ),
            returnValueForMissingStub: _FakeMeasurementsApiService_3(
              this,
              Invocation.getter(#measurementsApiService),
            ),
          )
          as _i5.MeasurementsApiService);

  @override
  _i6.SettingsService get settingsService =>
      (super.noSuchMethod(
            Invocation.getter(#settingsService),
            returnValue: _FakeSettingsService_4(
              this,
              Invocation.getter(#settingsService),
            ),
            returnValueForMissingStub: _FakeSettingsService_4(
              this,
              Invocation.getter(#settingsService),
            ),
          )
          as _i6.SettingsService);

  @override
  _i7.LocationService get locationService =>
      (super.noSuchMethod(
            Invocation.getter(#locationService),
            returnValue: _FakeLocationService_5(
              this,
              Invocation.getter(#locationService),
            ),
            returnValueForMissingStub: _FakeLocationService_5(
              this,
              Invocation.getter(#locationService),
            ),
          )
          as _i7.LocationService);

  @override
  _i8.NetworkService get networkService =>
      (super.noSuchMethod(
            Invocation.getter(#networkService),
            returnValue: _FakeNetworkService_6(
              this,
              Invocation.getter(#networkService),
            ),
            returnValueForMissingStub: _FakeNetworkService_6(
              this,
              Invocation.getter(#networkService),
            ),
          )
          as _i8.NetworkService);

  @override
  _i9.SignalService get signalService =>
      (super.noSuchMethod(
            Invocation.getter(#signalService),
            returnValue: _FakeSignalService_7(
              this,
              Invocation.getter(#signalService),
            ),
            returnValueForMissingStub: _FakeSignalService_7(
              this,
              Invocation.getter(#signalService),
            ),
          )
          as _i9.SignalService);

  @override
  _i10.NavigationService get navigationService =>
      (super.noSuchMethod(
            Invocation.getter(#navigationService),
            returnValue: _FakeNavigationService_8(
              this,
              Invocation.getter(#navigationService),
            ),
            returnValueForMissingStub: _FakeNavigationService_8(
              this,
              Invocation.getter(#navigationService),
            ),
          )
          as _i10.NavigationService);

  @override
  _i11.PlatformWrapper get platform =>
      (super.noSuchMethod(
            Invocation.getter(#platform),
            returnValue: _FakePlatformWrapper_9(
              this,
              Invocation.getter(#platform),
            ),
            returnValueForMissingStub: _FakePlatformWrapper_9(
              this,
              Invocation.getter(#platform),
            ),
          )
          as _i11.PlatformWrapper);

  @override
  _i12.SharedPreferencesWrapper get preferences =>
      (super.noSuchMethod(
            Invocation.getter(#preferences),
            returnValue: _FakeSharedPreferencesWrapper_10(
              this,
              Invocation.getter(#preferences),
            ),
            returnValueForMissingStub: _FakeSharedPreferencesWrapper_10(
              this,
              Invocation.getter(#preferences),
            ),
          )
          as _i12.SharedPreferencesWrapper);

  @override
  set errorHandler(_i19.ErrorHandler? _errorHandler) => super.noSuchMethod(
    Invocation.setter(#errorHandler, _errorHandler),
    returnValueForMissingStub: null,
  );

  @override
  set connectivityChangesHandler(
    _i8.ConnectivityChangesHandler? _connectivityChangesHandler,
  ) => super.noSuchMethod(
    Invocation.setter(#connectivityChangesHandler, _connectivityChangesHandler),
    returnValueForMissingStub: null,
  );

  @override
  set loopModeChangesHandler(
    _i3.LoopModeChangesHandler? _loopModeChangesHandler,
  ) => super.noSuchMethod(
    Invocation.setter(#loopModeChangesHandler, _loopModeChangesHandler),
    returnValueForMissingStub: null,
  );

  @override
  bool get testing =>
      (super.noSuchMethod(
            Invocation.getter(#testing),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  set testing(bool? _testing) => super.noSuchMethod(
    Invocation.setter(#testing, _testing),
    returnValueForMissingStub: null,
  );

  @override
  _i13.MeasurementsState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeMeasurementsState_11(
              this,
              Invocation.getter(#state),
            ),
            returnValueForMissingStub: _FakeMeasurementsState_11(
              this,
              Invocation.getter(#state),
            ),
          )
          as _i13.MeasurementsState);

  @override
  _i16.Stream<_i13.MeasurementsState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i16.Stream<_i13.MeasurementsState>.empty(),
            returnValueForMissingStub:
                _i16.Stream<_i13.MeasurementsState>.empty(),
          )
          as _i16.Stream<_i13.MeasurementsState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(
            Invocation.getter(#isClosed),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  _i16.Future<void> startMeasurement({
    required int? retryCount,
    required _i20.MeasurementServer? currentServer,
    required _i21.Emitter<_i13.MeasurementsState>? emit,
    dynamic switchingServer = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#startMeasurement, [], {
              #retryCount: retryCount,
              #currentServer: currentServer,
              #emit: emit,
              #switchingServer: switchingServer,
            }),
            returnValue: _i16.Future<void>.value(),
            returnValueForMissingStub: _i16.Future<void>.value(),
          )
          as _i16.Future<void>);

  @override
  _i16.Future<_i13.MeasurementsState> stopMeasurement() =>
      (super.noSuchMethod(
            Invocation.method(#stopMeasurement, []),
            returnValue: _i16.Future<_i13.MeasurementsState>.value(
              _FakeMeasurementsState_11(
                this,
                Invocation.method(#stopMeasurement, []),
              ),
            ),
            returnValueForMissingStub:
                _i16.Future<_i13.MeasurementsState>.value(
                  _FakeMeasurementsState_11(
                    this,
                    Invocation.method(#stopMeasurement, []),
                  ),
                ),
          )
          as _i16.Future<_i13.MeasurementsState>);

  @override
  _i16.Future<dynamic> showMeasurementResult(String? measurementUuid) =>
      (super.noSuchMethod(
            Invocation.method(#showMeasurementResult, [measurementUuid]),
            returnValue: _i16.Future<dynamic>.value(),
            returnValueForMissingStub: _i16.Future<dynamic>.value(),
          )
          as _i16.Future<dynamic>);

  @override
  dynamic setCloseDialogVisible(bool? visible) => super.noSuchMethod(
    Invocation.method(#setCloseDialogVisible, [visible]),
    returnValueForMissingStub: null,
  );

  @override
  _i16.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i16.Future<void>.value(),
            returnValueForMissingStub: _i16.Future<void>.value(),
          )
          as _i16.Future<void>);

  @override
  void add(_i22.BlocEvent<dynamic>? event) => super.noSuchMethod(
    Invocation.method(#add, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void onEvent(_i22.BlocEvent<dynamic>? event) => super.noSuchMethod(
    Invocation.method(#onEvent, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void emit(_i13.MeasurementsState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void on<E extends _i22.BlocEvent<dynamic>>(
    _i21.EventHandler<E, _i13.MeasurementsState>? handler, {
    _i21.EventTransformer<E>? transformer,
  }) => super.noSuchMethod(
    Invocation.method(#on, [handler], {#transformer: transformer}),
    returnValueForMissingStub: null,
  );

  @override
  void onTransition(
    _i21.Transition<_i22.BlocEvent<dynamic>, _i13.MeasurementsState>?
    transition,
  ) => super.noSuchMethod(
    Invocation.method(#onTransition, [transition]),
    returnValueForMissingStub: null,
  );

  @override
  void onChange(_i21.Change<_i13.MeasurementsState>? change) =>
      super.noSuchMethod(
        Invocation.method(#onChange, [change]),
        returnValueForMissingStub: null,
      );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [DioException].
///
/// See the documentation for Mockito's code generation for more information.
class MockDioError extends _i1.Mock implements _i14.DioException {
  @override
  _i14.RequestOptions get requestOptions =>
      (super.noSuchMethod(
            Invocation.getter(#requestOptions),
            returnValue: _FakeRequestOptions_12(
              this,
              Invocation.getter(#requestOptions),
            ),
            returnValueForMissingStub: _FakeRequestOptions_12(
              this,
              Invocation.getter(#requestOptions),
            ),
          )
          as _i14.RequestOptions);

  @override
  _i14.DioExceptionType get type =>
      (super.noSuchMethod(
            Invocation.getter(#type),
            returnValue: _i14.DioExceptionType.connectionTimeout,
            returnValueForMissingStub: _i14.DioExceptionType.connectionTimeout,
          )
          as _i14.DioExceptionType);

  @override
  StackTrace get stackTrace =>
      (super.noSuchMethod(
            Invocation.getter(#stackTrace),
            returnValue: _FakeStackTrace_13(
              this,
              Invocation.getter(#stackTrace),
            ),
            returnValueForMissingStub: _FakeStackTrace_13(
              this,
              Invocation.getter(#stackTrace),
            ),
          )
          as StackTrace);

  @override
  set stringBuilder(_i14.DioExceptionReadableStringBuilder? _stringBuilder) =>
      super.noSuchMethod(
        Invocation.setter(#stringBuilder, _stringBuilder),
        returnValueForMissingStub: null,
      );

  @override
  _i14.DioException copyWith({
    _i14.RequestOptions? requestOptions,
    _i14.Response<dynamic>? response,
    _i14.DioExceptionType? type,
    Object? error,
    StackTrace? stackTrace,
    String? message,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#copyWith, [], {
              #requestOptions: requestOptions,
              #response: response,
              #type: type,
              #error: error,
              #stackTrace: stackTrace,
              #message: message,
            }),
            returnValue: _FakeDioException_14(
              this,
              Invocation.method(#copyWith, [], {
                #requestOptions: requestOptions,
                #response: response,
                #type: type,
                #error: error,
                #stackTrace: stackTrace,
                #message: message,
              }),
            ),
            returnValueForMissingStub: _FakeDioException_14(
              this,
              Invocation.method(#copyWith, [], {
                #requestOptions: requestOptions,
                #response: response,
                #type: type,
                #error: error,
                #stackTrace: stackTrace,
                #message: message,
              }),
            ),
          )
          as _i14.DioException);
}
