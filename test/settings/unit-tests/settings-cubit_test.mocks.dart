// Mocks generated by Mockito 5.4.5 from annotations
// in nt_flutter_standalone/test/settings/unit-tests/settings-cubit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;

import 'package:connectivity_plus/connectivity_plus.dart' as _i9;
import 'package:flutter/material.dart' as _i6;
import 'package:flutter/src/widgets/framework.dart' as _i10;
import 'package:flutter_bloc/flutter_bloc.dart' as _i11;
import 'package:mockito/mockito.dart' as _i1;
import 'package:nt_flutter_standalone/core/store/core.cubit.dart' as _i7;
import 'package:nt_flutter_standalone/core/store/core.state.dart' as _i4;
import 'package:nt_flutter_standalone/core/wrappers/firebase-analytics.wrapper.dart'
    as _i5;
import 'package:nt_flutter_standalone/modules/measurements/services/network.service.dart'
    as _i2;
import 'package:nt_flutter_standalone/modules/settings/services/settings.service.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeConnectivityChangesHandler_0 extends _i1.SmartFake
    implements _i2.ConnectivityChangesHandler {
  _FakeConnectivityChangesHandler_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSettingsService_1 extends _i1.SmartFake
    implements _i3.SettingsService {
  _FakeSettingsService_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeCoreState_2 extends _i1.SmartFake implements _i4.CoreState {
  _FakeCoreState_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [FirebaseAnalyticsWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseAnalyticsWrapper extends _i1.Mock
    implements _i5.FirebaseAnalyticsWrapper {
  MockFirebaseAnalyticsWrapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  dynamic setAnalyticsEnabled(bool? enabled) =>
      super.noSuchMethod(Invocation.method(#setAnalyticsEnabled, [enabled]));
}

/// A class which mocks [NavigatorObserver].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigatorObserver extends _i1.Mock implements _i6.NavigatorObserver {
  @override
  void didPush(_i6.Route<dynamic>? route, _i6.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(
        Invocation.method(#didPush, [route, previousRoute]),
        returnValueForMissingStub: null,
      );

  @override
  void didPop(_i6.Route<dynamic>? route, _i6.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(
        Invocation.method(#didPop, [route, previousRoute]),
        returnValueForMissingStub: null,
      );

  @override
  void didRemove(
    _i6.Route<dynamic>? route,
    _i6.Route<dynamic>? previousRoute,
  ) => super.noSuchMethod(
    Invocation.method(#didRemove, [route, previousRoute]),
    returnValueForMissingStub: null,
  );

  @override
  void didReplace({
    _i6.Route<dynamic>? newRoute,
    _i6.Route<dynamic>? oldRoute,
  }) => super.noSuchMethod(
    Invocation.method(#didReplace, [], {
      #newRoute: newRoute,
      #oldRoute: oldRoute,
    }),
    returnValueForMissingStub: null,
  );

  @override
  void didChangeTop(
    _i6.Route<dynamic>? topRoute,
    _i6.Route<dynamic>? previousTopRoute,
  ) => super.noSuchMethod(
    Invocation.method(#didChangeTop, [topRoute, previousTopRoute]),
    returnValueForMissingStub: null,
  );

  @override
  void didStartUserGesture(
    _i6.Route<dynamic>? route,
    _i6.Route<dynamic>? previousRoute,
  ) => super.noSuchMethod(
    Invocation.method(#didStartUserGesture, [route, previousRoute]),
    returnValueForMissingStub: null,
  );

  @override
  void didStopUserGesture() => super.noSuchMethod(
    Invocation.method(#didStopUserGesture, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [CoreCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockCoreCubit extends _i1.Mock implements _i7.CoreCubit {
  @override
  _i2.ConnectivityChangesHandler get connectivityChangesHandler =>
      (super.noSuchMethod(
            Invocation.getter(#connectivityChangesHandler),
            returnValue: _FakeConnectivityChangesHandler_0(
              this,
              Invocation.getter(#connectivityChangesHandler),
            ),
            returnValueForMissingStub: _FakeConnectivityChangesHandler_0(
              this,
              Invocation.getter(#connectivityChangesHandler),
            ),
          )
          as _i2.ConnectivityChangesHandler);

  @override
  _i3.SettingsService get settingsService =>
      (super.noSuchMethod(
            Invocation.getter(#settingsService),
            returnValue: _FakeSettingsService_1(
              this,
              Invocation.getter(#settingsService),
            ),
            returnValueForMissingStub: _FakeSettingsService_1(
              this,
              Invocation.getter(#settingsService),
            ),
          )
          as _i3.SettingsService);

  @override
  _i4.CoreState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeCoreState_2(this, Invocation.getter(#state)),
            returnValueForMissingStub: _FakeCoreState_2(
              this,
              Invocation.getter(#state),
            ),
          )
          as _i4.CoreState);

  @override
  _i8.Stream<_i4.CoreState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i8.Stream<_i4.CoreState>.empty(),
            returnValueForMissingStub: _i8.Stream<_i4.CoreState>.empty(),
          )
          as _i8.Stream<_i4.CoreState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(
            Invocation.getter(#isClosed),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  void init() => super.noSuchMethod(
    Invocation.method(#init, []),
    returnValueForMissingStub: null,
  );

  @override
  _i8.Future<dynamic> update({_i9.ConnectivityResult? connectivity}) =>
      (super.noSuchMethod(
            Invocation.method(#update, [], {#connectivity: connectivity}),
            returnValue: _i8.Future<dynamic>.value(),
            returnValueForMissingStub: _i8.Future<dynamic>.value(),
          )
          as _i8.Future<dynamic>);

  @override
  void onItemTap(int? index) => super.noSuchMethod(
    Invocation.method(#onItemTap, [index]),
    returnValueForMissingStub: null,
  );

  @override
  void goToScreen<T extends _i10.Widget>() => super.noSuchMethod(
    Invocation.method(#goToScreen, []),
    returnValueForMissingStub: null,
  );

  @override
  _i8.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  void emit(_i4.CoreState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void onChange(_i11.Change<_i4.CoreState>? change) => super.noSuchMethod(
    Invocation.method(#onChange, [change]),
    returnValueForMissingStub: null,
  );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );
}
